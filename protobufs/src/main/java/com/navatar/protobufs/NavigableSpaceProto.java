// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavigableSpaceProto.proto

package com.navatar.protobufs;

public final class NavigableSpaceProto {
  private NavigableSpaceProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface NavigableSpaceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.NavigableSpace)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> 
        getOuterBoundaryList();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.Coordinates getOuterBoundary(int index);
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    int getOuterBoundaryCount();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
        getOuterBoundaryOrBuilderList();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getOuterBoundaryOrBuilder(
        int index);

    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    java.util.List<com.navatar.protobufs.NavigableSpaceProto.Ring> 
        getRingsList();
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    com.navatar.protobufs.NavigableSpaceProto.Ring getRings(int index);
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    int getRingsCount();
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    java.util.List<? extends com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder> 
        getRingsOrBuilderList();
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder getRingsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.navatar.protobufs.NavigableSpace}
   *
   * <pre>
   **
   * The protobuf that defines the NavigableSpace class.
   * </pre>
   */
  public static final class NavigableSpace extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.navatar.protobufs.NavigableSpace)
      NavigableSpaceOrBuilder {
    // Use NavigableSpace.newBuilder() to construct.
    private NavigableSpace(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NavigableSpace(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NavigableSpace defaultInstance;
    public static NavigableSpace getDefaultInstance() {
      return defaultInstance;
    }

    public NavigableSpace getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NavigableSpace(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                outerBoundary_ = new java.util.ArrayList<com.navatar.protobufs.CoordinatesProto.Coordinates>();
                mutable_bitField0_ |= 0x00000001;
              }
              outerBoundary_.add(input.readMessage(com.navatar.protobufs.CoordinatesProto.Coordinates.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                rings_ = new java.util.ArrayList<com.navatar.protobufs.NavigableSpaceProto.Ring>();
                mutable_bitField0_ |= 0x00000002;
              }
              rings_.add(input.readMessage(com.navatar.protobufs.NavigableSpaceProto.Ring.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          outerBoundary_ = java.util.Collections.unmodifiableList(outerBoundary_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          rings_ = java.util.Collections.unmodifiableList(rings_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_NavigableSpace_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_NavigableSpace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.class, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder.class);
    }

    public static com.google.protobuf.Parser<NavigableSpace> PARSER =
        new com.google.protobuf.AbstractParser<NavigableSpace>() {
      public NavigableSpace parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NavigableSpace(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NavigableSpace> getParserForType() {
      return PARSER;
    }

    public static final int OUTERBOUNDARY_FIELD_NUMBER = 1;
    private java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> outerBoundary_;
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> getOuterBoundaryList() {
      return outerBoundary_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    public java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
        getOuterBoundaryOrBuilderList() {
      return outerBoundary_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    public int getOuterBoundaryCount() {
      return outerBoundary_.size();
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.Coordinates getOuterBoundary(int index) {
      return outerBoundary_.get(index);
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
     *
     * <pre>
     * The outer polygon that defines the navigable space. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getOuterBoundaryOrBuilder(
        int index) {
      return outerBoundary_.get(index);
    }

    public static final int RINGS_FIELD_NUMBER = 2;
    private java.util.List<com.navatar.protobufs.NavigableSpaceProto.Ring> rings_;
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    public java.util.List<com.navatar.protobufs.NavigableSpaceProto.Ring> getRingsList() {
      return rings_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    public java.util.List<? extends com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder> 
        getRingsOrBuilderList() {
      return rings_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    public int getRingsCount() {
      return rings_.size();
    }
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    public com.navatar.protobufs.NavigableSpaceProto.Ring getRings(int index) {
      return rings_.get(index);
    }
    /**
     * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
     *
     * <pre>
     * The inner rings that define the non navigable spaces within the polygon. 
     * </pre>
     */
    public com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder getRingsOrBuilder(
        int index) {
      return rings_.get(index);
    }

    private void initFields() {
      outerBoundary_ = java.util.Collections.emptyList();
      rings_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < outerBoundary_.size(); i++) {
        output.writeMessage(1, outerBoundary_.get(i));
      }
      for (int i = 0; i < rings_.size(); i++) {
        output.writeMessage(2, rings_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < outerBoundary_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, outerBoundary_.get(i));
      }
      for (int i = 0; i < rings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, rings_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.navatar.protobufs.NavigableSpaceProto.NavigableSpace prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.navatar.protobufs.NavigableSpace}
     *
     * <pre>
     **
     * The protobuf that defines the NavigableSpace class.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.NavigableSpace)
        com.navatar.protobufs.NavigableSpaceProto.NavigableSpaceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_NavigableSpace_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_NavigableSpace_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.class, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder.class);
      }

      // Construct using com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOuterBoundaryFieldBuilder();
          getRingsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (outerBoundaryBuilder_ == null) {
          outerBoundary_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          outerBoundaryBuilder_.clear();
        }
        if (ringsBuilder_ == null) {
          rings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ringsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_NavigableSpace_descriptor;
      }

      public com.navatar.protobufs.NavigableSpaceProto.NavigableSpace getDefaultInstanceForType() {
        return com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.getDefaultInstance();
      }

      public com.navatar.protobufs.NavigableSpaceProto.NavigableSpace build() {
        com.navatar.protobufs.NavigableSpaceProto.NavigableSpace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.navatar.protobufs.NavigableSpaceProto.NavigableSpace buildPartial() {
        com.navatar.protobufs.NavigableSpaceProto.NavigableSpace result = new com.navatar.protobufs.NavigableSpaceProto.NavigableSpace(this);
        int from_bitField0_ = bitField0_;
        if (outerBoundaryBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            outerBoundary_ = java.util.Collections.unmodifiableList(outerBoundary_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.outerBoundary_ = outerBoundary_;
        } else {
          result.outerBoundary_ = outerBoundaryBuilder_.build();
        }
        if (ringsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            rings_ = java.util.Collections.unmodifiableList(rings_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.rings_ = rings_;
        } else {
          result.rings_ = ringsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.navatar.protobufs.NavigableSpaceProto.NavigableSpace) {
          return mergeFrom((com.navatar.protobufs.NavigableSpaceProto.NavigableSpace)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.navatar.protobufs.NavigableSpaceProto.NavigableSpace other) {
        if (other == com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.getDefaultInstance()) return this;
        if (outerBoundaryBuilder_ == null) {
          if (!other.outerBoundary_.isEmpty()) {
            if (outerBoundary_.isEmpty()) {
              outerBoundary_ = other.outerBoundary_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureOuterBoundaryIsMutable();
              outerBoundary_.addAll(other.outerBoundary_);
            }
            onChanged();
          }
        } else {
          if (!other.outerBoundary_.isEmpty()) {
            if (outerBoundaryBuilder_.isEmpty()) {
              outerBoundaryBuilder_.dispose();
              outerBoundaryBuilder_ = null;
              outerBoundary_ = other.outerBoundary_;
              bitField0_ = (bitField0_ & ~0x00000001);
              outerBoundaryBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOuterBoundaryFieldBuilder() : null;
            } else {
              outerBoundaryBuilder_.addAllMessages(other.outerBoundary_);
            }
          }
        }
        if (ringsBuilder_ == null) {
          if (!other.rings_.isEmpty()) {
            if (rings_.isEmpty()) {
              rings_ = other.rings_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureRingsIsMutable();
              rings_.addAll(other.rings_);
            }
            onChanged();
          }
        } else {
          if (!other.rings_.isEmpty()) {
            if (ringsBuilder_.isEmpty()) {
              ringsBuilder_.dispose();
              ringsBuilder_ = null;
              rings_ = other.rings_;
              bitField0_ = (bitField0_ & ~0x00000002);
              ringsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRingsFieldBuilder() : null;
            } else {
              ringsBuilder_.addAllMessages(other.rings_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.navatar.protobufs.NavigableSpaceProto.NavigableSpace parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.navatar.protobufs.NavigableSpaceProto.NavigableSpace) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> outerBoundary_ =
        java.util.Collections.emptyList();
      private void ensureOuterBoundaryIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          outerBoundary_ = new java.util.ArrayList<com.navatar.protobufs.CoordinatesProto.Coordinates>(outerBoundary_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> outerBoundaryBuilder_;

      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> getOuterBoundaryList() {
        if (outerBoundaryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outerBoundary_);
        } else {
          return outerBoundaryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public int getOuterBoundaryCount() {
        if (outerBoundaryBuilder_ == null) {
          return outerBoundary_.size();
        } else {
          return outerBoundaryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates getOuterBoundary(int index) {
        if (outerBoundaryBuilder_ == null) {
          return outerBoundary_.get(index);
        } else {
          return outerBoundaryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder setOuterBoundary(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (outerBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOuterBoundaryIsMutable();
          outerBoundary_.set(index, value);
          onChanged();
        } else {
          outerBoundaryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder setOuterBoundary(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (outerBoundaryBuilder_ == null) {
          ensureOuterBoundaryIsMutable();
          outerBoundary_.set(index, builderForValue.build());
          onChanged();
        } else {
          outerBoundaryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder addOuterBoundary(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (outerBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOuterBoundaryIsMutable();
          outerBoundary_.add(value);
          onChanged();
        } else {
          outerBoundaryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder addOuterBoundary(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (outerBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOuterBoundaryIsMutable();
          outerBoundary_.add(index, value);
          onChanged();
        } else {
          outerBoundaryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder addOuterBoundary(
          com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (outerBoundaryBuilder_ == null) {
          ensureOuterBoundaryIsMutable();
          outerBoundary_.add(builderForValue.build());
          onChanged();
        } else {
          outerBoundaryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder addOuterBoundary(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (outerBoundaryBuilder_ == null) {
          ensureOuterBoundaryIsMutable();
          outerBoundary_.add(index, builderForValue.build());
          onChanged();
        } else {
          outerBoundaryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder addAllOuterBoundary(
          java.lang.Iterable<? extends com.navatar.protobufs.CoordinatesProto.Coordinates> values) {
        if (outerBoundaryBuilder_ == null) {
          ensureOuterBoundaryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outerBoundary_);
          onChanged();
        } else {
          outerBoundaryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder clearOuterBoundary() {
        if (outerBoundaryBuilder_ == null) {
          outerBoundary_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          outerBoundaryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public Builder removeOuterBoundary(int index) {
        if (outerBoundaryBuilder_ == null) {
          ensureOuterBoundaryIsMutable();
          outerBoundary_.remove(index);
          onChanged();
        } else {
          outerBoundaryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder getOuterBoundaryBuilder(
          int index) {
        return getOuterBoundaryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getOuterBoundaryOrBuilder(
          int index) {
        if (outerBoundaryBuilder_ == null) {
          return outerBoundary_.get(index);  } else {
          return outerBoundaryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
           getOuterBoundaryOrBuilderList() {
        if (outerBoundaryBuilder_ != null) {
          return outerBoundaryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outerBoundary_);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder addOuterBoundaryBuilder() {
        return getOuterBoundaryFieldBuilder().addBuilder(
            com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder addOuterBoundaryBuilder(
          int index) {
        return getOuterBoundaryFieldBuilder().addBuilder(
            index, com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates outerBoundary = 1;</code>
       *
       * <pre>
       * The outer polygon that defines the navigable space. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates.Builder> 
           getOuterBoundaryBuilderList() {
        return getOuterBoundaryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
          getOuterBoundaryFieldBuilder() {
        if (outerBoundaryBuilder_ == null) {
          outerBoundaryBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder>(
                  outerBoundary_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          outerBoundary_ = null;
        }
        return outerBoundaryBuilder_;
      }

      private java.util.List<com.navatar.protobufs.NavigableSpaceProto.Ring> rings_ =
        java.util.Collections.emptyList();
      private void ensureRingsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          rings_ = new java.util.ArrayList<com.navatar.protobufs.NavigableSpaceProto.Ring>(rings_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.NavigableSpaceProto.Ring, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder, com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder> ringsBuilder_;

      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.NavigableSpaceProto.Ring> getRingsList() {
        if (ringsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rings_);
        } else {
          return ringsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public int getRingsCount() {
        if (ringsBuilder_ == null) {
          return rings_.size();
        } else {
          return ringsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public com.navatar.protobufs.NavigableSpaceProto.Ring getRings(int index) {
        if (ringsBuilder_ == null) {
          return rings_.get(index);
        } else {
          return ringsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder setRings(
          int index, com.navatar.protobufs.NavigableSpaceProto.Ring value) {
        if (ringsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRingsIsMutable();
          rings_.set(index, value);
          onChanged();
        } else {
          ringsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder setRings(
          int index, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder builderForValue) {
        if (ringsBuilder_ == null) {
          ensureRingsIsMutable();
          rings_.set(index, builderForValue.build());
          onChanged();
        } else {
          ringsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder addRings(com.navatar.protobufs.NavigableSpaceProto.Ring value) {
        if (ringsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRingsIsMutable();
          rings_.add(value);
          onChanged();
        } else {
          ringsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder addRings(
          int index, com.navatar.protobufs.NavigableSpaceProto.Ring value) {
        if (ringsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRingsIsMutable();
          rings_.add(index, value);
          onChanged();
        } else {
          ringsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder addRings(
          com.navatar.protobufs.NavigableSpaceProto.Ring.Builder builderForValue) {
        if (ringsBuilder_ == null) {
          ensureRingsIsMutable();
          rings_.add(builderForValue.build());
          onChanged();
        } else {
          ringsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder addRings(
          int index, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder builderForValue) {
        if (ringsBuilder_ == null) {
          ensureRingsIsMutable();
          rings_.add(index, builderForValue.build());
          onChanged();
        } else {
          ringsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder addAllRings(
          java.lang.Iterable<? extends com.navatar.protobufs.NavigableSpaceProto.Ring> values) {
        if (ringsBuilder_ == null) {
          ensureRingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rings_);
          onChanged();
        } else {
          ringsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder clearRings() {
        if (ringsBuilder_ == null) {
          rings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          ringsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public Builder removeRings(int index) {
        if (ringsBuilder_ == null) {
          ensureRingsIsMutable();
          rings_.remove(index);
          onChanged();
        } else {
          ringsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public com.navatar.protobufs.NavigableSpaceProto.Ring.Builder getRingsBuilder(
          int index) {
        return getRingsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder getRingsOrBuilder(
          int index) {
        if (ringsBuilder_ == null) {
          return rings_.get(index);  } else {
          return ringsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public java.util.List<? extends com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder> 
           getRingsOrBuilderList() {
        if (ringsBuilder_ != null) {
          return ringsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rings_);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public com.navatar.protobufs.NavigableSpaceProto.Ring.Builder addRingsBuilder() {
        return getRingsFieldBuilder().addBuilder(
            com.navatar.protobufs.NavigableSpaceProto.Ring.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public com.navatar.protobufs.NavigableSpaceProto.Ring.Builder addRingsBuilder(
          int index) {
        return getRingsFieldBuilder().addBuilder(
            index, com.navatar.protobufs.NavigableSpaceProto.Ring.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Ring rings = 2;</code>
       *
       * <pre>
       * The inner rings that define the non navigable spaces within the polygon. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.NavigableSpaceProto.Ring.Builder> 
           getRingsBuilderList() {
        return getRingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.NavigableSpaceProto.Ring, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder, com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder> 
          getRingsFieldBuilder() {
        if (ringsBuilder_ == null) {
          ringsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.navatar.protobufs.NavigableSpaceProto.Ring, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder, com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder>(
                  rings_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          rings_ = null;
        }
        return ringsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.NavigableSpace)
    }

    static {
      defaultInstance = new NavigableSpace(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.navatar.protobufs.NavigableSpace)
  }

  public interface RingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Ring)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> 
        getPolygonList();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.Coordinates getPolygon(int index);
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    int getPolygonCount();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
        getPolygonOrBuilderList();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getPolygonOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.navatar.protobufs.Ring}
   *
   * <pre>
   **
   * The protobuf that defines the Ring class.
   * </pre>
   */
  public static final class Ring extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Ring)
      RingOrBuilder {
    // Use Ring.newBuilder() to construct.
    private Ring(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Ring(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Ring defaultInstance;
    public static Ring getDefaultInstance() {
      return defaultInstance;
    }

    public Ring getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Ring(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                polygon_ = new java.util.ArrayList<com.navatar.protobufs.CoordinatesProto.Coordinates>();
                mutable_bitField0_ |= 0x00000001;
              }
              polygon_.add(input.readMessage(com.navatar.protobufs.CoordinatesProto.Coordinates.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          polygon_ = java.util.Collections.unmodifiableList(polygon_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_Ring_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_Ring_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.navatar.protobufs.NavigableSpaceProto.Ring.class, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder.class);
    }

    public static com.google.protobuf.Parser<Ring> PARSER =
        new com.google.protobuf.AbstractParser<Ring>() {
      public Ring parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ring(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Ring> getParserForType() {
      return PARSER;
    }

    public static final int POLYGON_FIELD_NUMBER = 1;
    private java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> polygon_;
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> getPolygonList() {
      return polygon_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    public java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
        getPolygonOrBuilderList() {
      return polygon_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    public int getPolygonCount() {
      return polygon_.size();
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.Coordinates getPolygon(int index) {
      return polygon_.get(index);
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
     *
     * <pre>
     * The inner rings of the navigable space which are inaccessible. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getPolygonOrBuilder(
        int index) {
      return polygon_.get(index);
    }

    private void initFields() {
      polygon_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < polygon_.size(); i++) {
        output.writeMessage(1, polygon_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < polygon_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, polygon_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.NavigableSpaceProto.Ring parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.navatar.protobufs.NavigableSpaceProto.Ring prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.navatar.protobufs.Ring}
     *
     * <pre>
     **
     * The protobuf that defines the Ring class.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Ring)
        com.navatar.protobufs.NavigableSpaceProto.RingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_Ring_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_Ring_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.navatar.protobufs.NavigableSpaceProto.Ring.class, com.navatar.protobufs.NavigableSpaceProto.Ring.Builder.class);
      }

      // Construct using com.navatar.protobufs.NavigableSpaceProto.Ring.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPolygonFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (polygonBuilder_ == null) {
          polygon_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          polygonBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.navatar.protobufs.NavigableSpaceProto.internal_static_com_navatar_protobufs_Ring_descriptor;
      }

      public com.navatar.protobufs.NavigableSpaceProto.Ring getDefaultInstanceForType() {
        return com.navatar.protobufs.NavigableSpaceProto.Ring.getDefaultInstance();
      }

      public com.navatar.protobufs.NavigableSpaceProto.Ring build() {
        com.navatar.protobufs.NavigableSpaceProto.Ring result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.navatar.protobufs.NavigableSpaceProto.Ring buildPartial() {
        com.navatar.protobufs.NavigableSpaceProto.Ring result = new com.navatar.protobufs.NavigableSpaceProto.Ring(this);
        int from_bitField0_ = bitField0_;
        if (polygonBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            polygon_ = java.util.Collections.unmodifiableList(polygon_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.polygon_ = polygon_;
        } else {
          result.polygon_ = polygonBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.navatar.protobufs.NavigableSpaceProto.Ring) {
          return mergeFrom((com.navatar.protobufs.NavigableSpaceProto.Ring)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.navatar.protobufs.NavigableSpaceProto.Ring other) {
        if (other == com.navatar.protobufs.NavigableSpaceProto.Ring.getDefaultInstance()) return this;
        if (polygonBuilder_ == null) {
          if (!other.polygon_.isEmpty()) {
            if (polygon_.isEmpty()) {
              polygon_ = other.polygon_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePolygonIsMutable();
              polygon_.addAll(other.polygon_);
            }
            onChanged();
          }
        } else {
          if (!other.polygon_.isEmpty()) {
            if (polygonBuilder_.isEmpty()) {
              polygonBuilder_.dispose();
              polygonBuilder_ = null;
              polygon_ = other.polygon_;
              bitField0_ = (bitField0_ & ~0x00000001);
              polygonBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPolygonFieldBuilder() : null;
            } else {
              polygonBuilder_.addAllMessages(other.polygon_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.navatar.protobufs.NavigableSpaceProto.Ring parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.navatar.protobufs.NavigableSpaceProto.Ring) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> polygon_ =
        java.util.Collections.emptyList();
      private void ensurePolygonIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          polygon_ = new java.util.ArrayList<com.navatar.protobufs.CoordinatesProto.Coordinates>(polygon_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> polygonBuilder_;

      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> getPolygonList() {
        if (polygonBuilder_ == null) {
          return java.util.Collections.unmodifiableList(polygon_);
        } else {
          return polygonBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public int getPolygonCount() {
        if (polygonBuilder_ == null) {
          return polygon_.size();
        } else {
          return polygonBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates getPolygon(int index) {
        if (polygonBuilder_ == null) {
          return polygon_.get(index);
        } else {
          return polygonBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder setPolygon(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (polygonBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePolygonIsMutable();
          polygon_.set(index, value);
          onChanged();
        } else {
          polygonBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder setPolygon(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (polygonBuilder_ == null) {
          ensurePolygonIsMutable();
          polygon_.set(index, builderForValue.build());
          onChanged();
        } else {
          polygonBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder addPolygon(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (polygonBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePolygonIsMutable();
          polygon_.add(value);
          onChanged();
        } else {
          polygonBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder addPolygon(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (polygonBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePolygonIsMutable();
          polygon_.add(index, value);
          onChanged();
        } else {
          polygonBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder addPolygon(
          com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (polygonBuilder_ == null) {
          ensurePolygonIsMutable();
          polygon_.add(builderForValue.build());
          onChanged();
        } else {
          polygonBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder addPolygon(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (polygonBuilder_ == null) {
          ensurePolygonIsMutable();
          polygon_.add(index, builderForValue.build());
          onChanged();
        } else {
          polygonBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder addAllPolygon(
          java.lang.Iterable<? extends com.navatar.protobufs.CoordinatesProto.Coordinates> values) {
        if (polygonBuilder_ == null) {
          ensurePolygonIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, polygon_);
          onChanged();
        } else {
          polygonBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder clearPolygon() {
        if (polygonBuilder_ == null) {
          polygon_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          polygonBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public Builder removePolygon(int index) {
        if (polygonBuilder_ == null) {
          ensurePolygonIsMutable();
          polygon_.remove(index);
          onChanged();
        } else {
          polygonBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder getPolygonBuilder(
          int index) {
        return getPolygonFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getPolygonOrBuilder(
          int index) {
        if (polygonBuilder_ == null) {
          return polygon_.get(index);  } else {
          return polygonBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
           getPolygonOrBuilderList() {
        if (polygonBuilder_ != null) {
          return polygonBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(polygon_);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder addPolygonBuilder() {
        return getPolygonFieldBuilder().addBuilder(
            com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder addPolygonBuilder(
          int index) {
        return getPolygonFieldBuilder().addBuilder(
            index, com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates polygon = 1;</code>
       *
       * <pre>
       * The inner rings of the navigable space which are inaccessible. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates.Builder> 
           getPolygonBuilderList() {
        return getPolygonFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
          getPolygonFieldBuilder() {
        if (polygonBuilder_ == null) {
          polygonBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder>(
                  polygon_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          polygon_ = null;
        }
        return polygonBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Ring)
    }

    static {
      defaultInstance = new Ring(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Ring)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_navatar_protobufs_NavigableSpace_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_navatar_protobufs_NavigableSpace_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_navatar_protobufs_Ring_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_navatar_protobufs_Ring_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031NavigableSpaceProto.proto\022\025com.navatar" +
      ".protobufs\032\026CoordinatesProto.proto\"w\n\016Na" +
      "vigableSpace\0229\n\routerBoundary\030\001 \003(\0132\".co" +
      "m.navatar.protobufs.Coordinates\022*\n\005rings" +
      "\030\002 \003(\0132\033.com.navatar.protobufs.Ring\";\n\004R" +
      "ing\0223\n\007polygon\030\001 \003(\0132\".com.navatar.proto" +
      "bufs.Coordinates"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.navatar.protobufs.CoordinatesProto.getDescriptor(),
        }, assigner);
    internal_static_com_navatar_protobufs_NavigableSpace_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_navatar_protobufs_NavigableSpace_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_navatar_protobufs_NavigableSpace_descriptor,
        new java.lang.String[] { "OuterBoundary", "Rings", });
    internal_static_com_navatar_protobufs_Ring_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_navatar_protobufs_Ring_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_navatar_protobufs_Ring_descriptor,
        new java.lang.String[] { "Polygon", });
    com.navatar.protobufs.CoordinatesProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
