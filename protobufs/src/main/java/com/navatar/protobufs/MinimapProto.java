// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MinimapProto.proto

package com.navatar.protobufs;

public final class MinimapProto {
  private MinimapProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MinimapOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Minimap)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double sideSize = 1;</code>
     *
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     */
    boolean hasSideSize();
    /**
     * <code>optional double sideSize = 1;</code>
     *
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     */
    double getSideSize();

    /**
     * <code>optional int32 rows = 2;</code>
     *
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     */
    boolean hasRows();
    /**
     * <code>optional int32 rows = 2;</code>
     *
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     */
    int getRows();

    /**
     * <code>optional int32 columns = 3;</code>
     *
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     */
    boolean hasColumns();
    /**
     * <code>optional int32 columns = 3;</code>
     *
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     */
    int getColumns();

    /**
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     *
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     */
    boolean hasMinCoordinates();
    /**
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     *
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.Coordinates getMinCoordinates();
    /**
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     *
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getMinCoordinatesOrBuilder();

    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> 
        getTilesList();
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    com.navatar.protobufs.MinimapProto.Minimap.Tile getTiles(int index);
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    int getTilesCount();
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    java.util.List<? extends com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder> 
        getTilesOrBuilderList();
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder getTilesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.navatar.protobufs.Minimap}
   *
   * <pre>
   **
   * The protobuf definition for the Minimap class. Minimaps are used in the Floor protobuf class
   * in order to speed up landmark search and help discretize navigation.
   * </pre>
   */
  public static final class Minimap extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Minimap)
      MinimapOrBuilder {
    // Use Minimap.newBuilder() to construct.
    private Minimap(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Minimap(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Minimap defaultInstance;
    public static Minimap getDefaultInstance() {
      return defaultInstance;
    }

    public Minimap getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Minimap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              sideSize_ = input.readDouble();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rows_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              columns_ = input.readInt32();
              break;
            }
            case 34: {
              com.navatar.protobufs.CoordinatesProto.Coordinates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = minCoordinates_.toBuilder();
              }
              minCoordinates_ = input.readMessage(com.navatar.protobufs.CoordinatesProto.Coordinates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minCoordinates_);
                minCoordinates_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                tiles_ = new java.util.ArrayList<com.navatar.protobufs.MinimapProto.Minimap.Tile>();
                mutable_bitField0_ |= 0x00000010;
              }
              tiles_.add(input.readMessage(com.navatar.protobufs.MinimapProto.Minimap.Tile.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.navatar.protobufs.MinimapProto.Minimap.class, com.navatar.protobufs.MinimapProto.Minimap.Builder.class);
    }

    public static com.google.protobuf.Parser<Minimap> PARSER =
        new com.google.protobuf.AbstractParser<Minimap>() {
      public Minimap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Minimap(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Minimap> getParserForType() {
      return PARSER;
    }

    public interface TileOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Minimap.Tile)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row = 1;</code>
       *
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       */
      boolean hasRow();
      /**
       * <code>optional int32 row = 1;</code>
       *
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       */
      int getRow();

      /**
       * <code>optional int32 column = 2;</code>
       *
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       */
      boolean hasColumn();
      /**
       * <code>optional int32 column = 2;</code>
       *
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       */
      int getColumn();

      /**
       * <code>repeated int32 landmarks = 3;</code>
       *
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       */
      java.util.List<java.lang.Integer> getLandmarksList();
      /**
       * <code>repeated int32 landmarks = 3;</code>
       *
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       */
      int getLandmarksCount();
      /**
       * <code>repeated int32 landmarks = 3;</code>
       *
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       */
      int getLandmarks(int index);
    }
    /**
     * Protobuf type {@code com.navatar.protobufs.Minimap.Tile}
     *
     * <pre>
     **
     * The tiles used in minimap that a hold landmark information for a discreet amount of space.
     * </pre>
     */
    public static final class Tile extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Minimap.Tile)
        TileOrBuilder {
      // Use Tile.newBuilder() to construct.
      private Tile(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Tile(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Tile defaultInstance;
      public static Tile getDefaultInstance() {
        return defaultInstance;
      }

      public Tile getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Tile(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                row_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                column_ = input.readInt32();
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  landmarks_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                landmarks_.add(input.readInt32());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  landmarks_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  landmarks_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            landmarks_ = java.util.Collections.unmodifiableList(landmarks_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_Tile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_Tile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.navatar.protobufs.MinimapProto.Minimap.Tile.class, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder.class);
      }

      public static com.google.protobuf.Parser<Tile> PARSER =
          new com.google.protobuf.AbstractParser<Tile>() {
        public Tile parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Tile(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Tile> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int ROW_FIELD_NUMBER = 1;
      private int row_;
      /**
       * <code>optional int32 row = 1;</code>
       *
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       */
      public boolean hasRow() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 row = 1;</code>
       *
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       */
      public int getRow() {
        return row_;
      }

      public static final int COLUMN_FIELD_NUMBER = 2;
      private int column_;
      /**
       * <code>optional int32 column = 2;</code>
       *
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       */
      public boolean hasColumn() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 column = 2;</code>
       *
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       */
      public int getColumn() {
        return column_;
      }

      public static final int LANDMARKS_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Integer> landmarks_;
      /**
       * <code>repeated int32 landmarks = 3;</code>
       *
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLandmarksList() {
        return landmarks_;
      }
      /**
       * <code>repeated int32 landmarks = 3;</code>
       *
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       */
      public int getLandmarksCount() {
        return landmarks_.size();
      }
      /**
       * <code>repeated int32 landmarks = 3;</code>
       *
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       */
      public int getLandmarks(int index) {
        return landmarks_.get(index);
      }

      private void initFields() {
        row_ = 0;
        column_ = 0;
        landmarks_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, row_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, column_);
        }
        for (int i = 0; i < landmarks_.size(); i++) {
          output.writeInt32(3, landmarks_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, row_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, column_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < landmarks_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(landmarks_.get(i));
          }
          size += dataSize;
          size += 1 * getLandmarksList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.navatar.protobufs.MinimapProto.Minimap.Tile prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.navatar.protobufs.Minimap.Tile}
       *
       * <pre>
       **
       * The tiles used in minimap that a hold landmark information for a discreet amount of space.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Minimap.Tile)
          com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_Tile_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_Tile_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.navatar.protobufs.MinimapProto.Minimap.Tile.class, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder.class);
        }

        // Construct using com.navatar.protobufs.MinimapProto.Minimap.Tile.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          row_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          column_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          landmarks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_Tile_descriptor;
        }

        public com.navatar.protobufs.MinimapProto.Minimap.Tile getDefaultInstanceForType() {
          return com.navatar.protobufs.MinimapProto.Minimap.Tile.getDefaultInstance();
        }

        public com.navatar.protobufs.MinimapProto.Minimap.Tile build() {
          com.navatar.protobufs.MinimapProto.Minimap.Tile result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.navatar.protobufs.MinimapProto.Minimap.Tile buildPartial() {
          com.navatar.protobufs.MinimapProto.Minimap.Tile result = new com.navatar.protobufs.MinimapProto.Minimap.Tile(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.row_ = row_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.column_ = column_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            landmarks_ = java.util.Collections.unmodifiableList(landmarks_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.landmarks_ = landmarks_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.navatar.protobufs.MinimapProto.Minimap.Tile) {
            return mergeFrom((com.navatar.protobufs.MinimapProto.Minimap.Tile)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.navatar.protobufs.MinimapProto.Minimap.Tile other) {
          if (other == com.navatar.protobufs.MinimapProto.Minimap.Tile.getDefaultInstance()) return this;
          if (other.hasRow()) {
            setRow(other.getRow());
          }
          if (other.hasColumn()) {
            setColumn(other.getColumn());
          }
          if (!other.landmarks_.isEmpty()) {
            if (landmarks_.isEmpty()) {
              landmarks_ = other.landmarks_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureLandmarksIsMutable();
              landmarks_.addAll(other.landmarks_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.navatar.protobufs.MinimapProto.Minimap.Tile parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.navatar.protobufs.MinimapProto.Minimap.Tile) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int row_ ;
        /**
         * <code>optional int32 row = 1;</code>
         *
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         */
        public boolean hasRow() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 row = 1;</code>
         *
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         */
        public int getRow() {
          return row_;
        }
        /**
         * <code>optional int32 row = 1;</code>
         *
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         */
        public Builder setRow(int value) {
          bitField0_ |= 0x00000001;
          row_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row = 1;</code>
         *
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         */
        public Builder clearRow() {
          bitField0_ = (bitField0_ & ~0x00000001);
          row_ = 0;
          onChanged();
          return this;
        }

        private int column_ ;
        /**
         * <code>optional int32 column = 2;</code>
         *
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         */
        public boolean hasColumn() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 column = 2;</code>
         *
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         */
        public int getColumn() {
          return column_;
        }
        /**
         * <code>optional int32 column = 2;</code>
         *
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         */
        public Builder setColumn(int value) {
          bitField0_ |= 0x00000002;
          column_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 column = 2;</code>
         *
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         */
        public Builder clearColumn() {
          bitField0_ = (bitField0_ & ~0x00000002);
          column_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Integer> landmarks_ = java.util.Collections.emptyList();
        private void ensureLandmarksIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            landmarks_ = new java.util.ArrayList<java.lang.Integer>(landmarks_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getLandmarksList() {
          return java.util.Collections.unmodifiableList(landmarks_);
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public int getLandmarksCount() {
          return landmarks_.size();
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public int getLandmarks(int index) {
          return landmarks_.get(index);
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public Builder setLandmarks(
            int index, int value) {
          ensureLandmarksIsMutable();
          landmarks_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public Builder addLandmarks(int value) {
          ensureLandmarksIsMutable();
          landmarks_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public Builder addAllLandmarks(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureLandmarksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, landmarks_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 landmarks = 3;</code>
         *
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         */
        public Builder clearLandmarks() {
          landmarks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Minimap.Tile)
      }

      static {
        defaultInstance = new Tile(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Minimap.Tile)
    }

    private int bitField0_;
    public static final int SIDESIZE_FIELD_NUMBER = 1;
    private double sideSize_;
    /**
     * <code>optional double sideSize = 1;</code>
     *
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     */
    public boolean hasSideSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double sideSize = 1;</code>
     *
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     */
    public double getSideSize() {
      return sideSize_;
    }

    public static final int ROWS_FIELD_NUMBER = 2;
    private int rows_;
    /**
     * <code>optional int32 rows = 2;</code>
     *
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     */
    public boolean hasRows() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 rows = 2;</code>
     *
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     */
    public int getRows() {
      return rows_;
    }

    public static final int COLUMNS_FIELD_NUMBER = 3;
    private int columns_;
    /**
     * <code>optional int32 columns = 3;</code>
     *
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     */
    public boolean hasColumns() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 columns = 3;</code>
     *
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     */
    public int getColumns() {
      return columns_;
    }

    public static final int MINCOORDINATES_FIELD_NUMBER = 4;
    private com.navatar.protobufs.CoordinatesProto.Coordinates minCoordinates_;
    /**
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     *
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     */
    public boolean hasMinCoordinates() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     *
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.Coordinates getMinCoordinates() {
      return minCoordinates_;
    }
    /**
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     *
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getMinCoordinatesOrBuilder() {
      return minCoordinates_;
    }

    public static final int TILES_FIELD_NUMBER = 5;
    private java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> tiles_;
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    public java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    public java.util.List<? extends com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder> 
        getTilesOrBuilderList() {
      return tiles_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    public com.navatar.protobufs.MinimapProto.Minimap.Tile getTiles(int index) {
      return tiles_.get(index);
    }
    /**
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     *
     * <pre>
     * The tiles of the minimap.
     * </pre>
     */
    public com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder getTilesOrBuilder(
        int index) {
      return tiles_.get(index);
    }

    private void initFields() {
      sideSize_ = 0D;
      rows_ = 0;
      columns_ = 0;
      minCoordinates_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
      tiles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, sideSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, rows_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, columns_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, minCoordinates_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeMessage(5, tiles_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, sideSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, rows_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, columns_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, minCoordinates_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, tiles_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.navatar.protobufs.MinimapProto.Minimap prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.navatar.protobufs.Minimap}
     *
     * <pre>
     **
     * The protobuf definition for the Minimap class. Minimaps are used in the Floor protobuf class
     * in order to speed up landmark search and help discretize navigation.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Minimap)
        com.navatar.protobufs.MinimapProto.MinimapOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.navatar.protobufs.MinimapProto.Minimap.class, com.navatar.protobufs.MinimapProto.Minimap.Builder.class);
      }

      // Construct using com.navatar.protobufs.MinimapProto.Minimap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMinCoordinatesFieldBuilder();
          getTilesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sideSize_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        rows_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        columns_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (minCoordinatesBuilder_ == null) {
          minCoordinates_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
        } else {
          minCoordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (tilesBuilder_ == null) {
          tiles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          tilesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.navatar.protobufs.MinimapProto.internal_static_com_navatar_protobufs_Minimap_descriptor;
      }

      public com.navatar.protobufs.MinimapProto.Minimap getDefaultInstanceForType() {
        return com.navatar.protobufs.MinimapProto.Minimap.getDefaultInstance();
      }

      public com.navatar.protobufs.MinimapProto.Minimap build() {
        com.navatar.protobufs.MinimapProto.Minimap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.navatar.protobufs.MinimapProto.Minimap buildPartial() {
        com.navatar.protobufs.MinimapProto.Minimap result = new com.navatar.protobufs.MinimapProto.Minimap(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sideSize_ = sideSize_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rows_ = rows_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.columns_ = columns_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (minCoordinatesBuilder_ == null) {
          result.minCoordinates_ = minCoordinates_;
        } else {
          result.minCoordinates_ = minCoordinatesBuilder_.build();
        }
        if (tilesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            tiles_ = java.util.Collections.unmodifiableList(tiles_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.tiles_ = tiles_;
        } else {
          result.tiles_ = tilesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.navatar.protobufs.MinimapProto.Minimap) {
          return mergeFrom((com.navatar.protobufs.MinimapProto.Minimap)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.navatar.protobufs.MinimapProto.Minimap other) {
        if (other == com.navatar.protobufs.MinimapProto.Minimap.getDefaultInstance()) return this;
        if (other.hasSideSize()) {
          setSideSize(other.getSideSize());
        }
        if (other.hasRows()) {
          setRows(other.getRows());
        }
        if (other.hasColumns()) {
          setColumns(other.getColumns());
        }
        if (other.hasMinCoordinates()) {
          mergeMinCoordinates(other.getMinCoordinates());
        }
        if (tilesBuilder_ == null) {
          if (!other.tiles_.isEmpty()) {
            if (tiles_.isEmpty()) {
              tiles_ = other.tiles_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureTilesIsMutable();
              tiles_.addAll(other.tiles_);
            }
            onChanged();
          }
        } else {
          if (!other.tiles_.isEmpty()) {
            if (tilesBuilder_.isEmpty()) {
              tilesBuilder_.dispose();
              tilesBuilder_ = null;
              tiles_ = other.tiles_;
              bitField0_ = (bitField0_ & ~0x00000010);
              tilesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTilesFieldBuilder() : null;
            } else {
              tilesBuilder_.addAllMessages(other.tiles_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.navatar.protobufs.MinimapProto.Minimap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.navatar.protobufs.MinimapProto.Minimap) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double sideSize_ ;
      /**
       * <code>optional double sideSize = 1;</code>
       *
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       */
      public boolean hasSideSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double sideSize = 1;</code>
       *
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       */
      public double getSideSize() {
        return sideSize_;
      }
      /**
       * <code>optional double sideSize = 1;</code>
       *
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       */
      public Builder setSideSize(double value) {
        bitField0_ |= 0x00000001;
        sideSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double sideSize = 1;</code>
       *
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       */
      public Builder clearSideSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sideSize_ = 0D;
        onChanged();
        return this;
      }

      private int rows_ ;
      /**
       * <code>optional int32 rows = 2;</code>
       *
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       */
      public boolean hasRows() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 rows = 2;</code>
       *
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       */
      public int getRows() {
        return rows_;
      }
      /**
       * <code>optional int32 rows = 2;</code>
       *
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       */
      public Builder setRows(int value) {
        bitField0_ |= 0x00000002;
        rows_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rows = 2;</code>
       *
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       */
      public Builder clearRows() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rows_ = 0;
        onChanged();
        return this;
      }

      private int columns_ ;
      /**
       * <code>optional int32 columns = 3;</code>
       *
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       */
      public boolean hasColumns() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 columns = 3;</code>
       *
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       */
      public int getColumns() {
        return columns_;
      }
      /**
       * <code>optional int32 columns = 3;</code>
       *
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       */
      public Builder setColumns(int value) {
        bitField0_ |= 0x00000004;
        columns_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 columns = 3;</code>
       *
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       */
      public Builder clearColumns() {
        bitField0_ = (bitField0_ & ~0x00000004);
        columns_ = 0;
        onChanged();
        return this;
      }

      private com.navatar.protobufs.CoordinatesProto.Coordinates minCoordinates_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> minCoordinatesBuilder_;
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public boolean hasMinCoordinates() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates getMinCoordinates() {
        if (minCoordinatesBuilder_ == null) {
          return minCoordinates_;
        } else {
          return minCoordinatesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public Builder setMinCoordinates(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (minCoordinatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minCoordinates_ = value;
          onChanged();
        } else {
          minCoordinatesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public Builder setMinCoordinates(
          com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (minCoordinatesBuilder_ == null) {
          minCoordinates_ = builderForValue.build();
          onChanged();
        } else {
          minCoordinatesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public Builder mergeMinCoordinates(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (minCoordinatesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              minCoordinates_ != com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance()) {
            minCoordinates_ =
              com.navatar.protobufs.CoordinatesProto.Coordinates.newBuilder(minCoordinates_).mergeFrom(value).buildPartial();
          } else {
            minCoordinates_ = value;
          }
          onChanged();
        } else {
          minCoordinatesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public Builder clearMinCoordinates() {
        if (minCoordinatesBuilder_ == null) {
          minCoordinates_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
          onChanged();
        } else {
          minCoordinatesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder getMinCoordinatesBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMinCoordinatesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getMinCoordinatesOrBuilder() {
        if (minCoordinatesBuilder_ != null) {
          return minCoordinatesBuilder_.getMessageOrBuilder();
        } else {
          return minCoordinates_;
        }
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       *
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
          getMinCoordinatesFieldBuilder() {
        if (minCoordinatesBuilder_ == null) {
          minCoordinatesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder>(
                  getMinCoordinates(),
                  getParentForChildren(),
                  isClean());
          minCoordinates_ = null;
        }
        return minCoordinatesBuilder_;
      }

      private java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> tiles_ =
        java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          tiles_ = new java.util.ArrayList<com.navatar.protobufs.MinimapProto.Minimap.Tile>(tiles_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.MinimapProto.Minimap.Tile, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder, com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder> tilesBuilder_;

      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> getTilesList() {
        if (tilesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tiles_);
        } else {
          return tilesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public int getTilesCount() {
        if (tilesBuilder_ == null) {
          return tiles_.size();
        } else {
          return tilesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public com.navatar.protobufs.MinimapProto.Minimap.Tile getTiles(int index) {
        if (tilesBuilder_ == null) {
          return tiles_.get(index);
        } else {
          return tilesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder setTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
        if (tilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTilesIsMutable();
          tiles_.set(index, value);
          onChanged();
        } else {
          tilesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder setTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
        if (tilesBuilder_ == null) {
          ensureTilesIsMutable();
          tiles_.set(index, builderForValue.build());
          onChanged();
        } else {
          tilesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder addTiles(com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
        if (tilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTilesIsMutable();
          tiles_.add(value);
          onChanged();
        } else {
          tilesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder addTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
        if (tilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTilesIsMutable();
          tiles_.add(index, value);
          onChanged();
        } else {
          tilesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder addTiles(
          com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
        if (tilesBuilder_ == null) {
          ensureTilesIsMutable();
          tiles_.add(builderForValue.build());
          onChanged();
        } else {
          tilesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder addTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
        if (tilesBuilder_ == null) {
          ensureTilesIsMutable();
          tiles_.add(index, builderForValue.build());
          onChanged();
        } else {
          tilesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends com.navatar.protobufs.MinimapProto.Minimap.Tile> values) {
        if (tilesBuilder_ == null) {
          ensureTilesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tiles_);
          onChanged();
        } else {
          tilesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder clearTiles() {
        if (tilesBuilder_ == null) {
          tiles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          tilesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public Builder removeTiles(int index) {
        if (tilesBuilder_ == null) {
          ensureTilesIsMutable();
          tiles_.remove(index);
          onChanged();
        } else {
          tilesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder getTilesBuilder(
          int index) {
        return getTilesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder getTilesOrBuilder(
          int index) {
        if (tilesBuilder_ == null) {
          return tiles_.get(index);  } else {
          return tilesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public java.util.List<? extends com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder> 
           getTilesOrBuilderList() {
        if (tilesBuilder_ != null) {
          return tilesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tiles_);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder addTilesBuilder() {
        return getTilesFieldBuilder().addBuilder(
            com.navatar.protobufs.MinimapProto.Minimap.Tile.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder addTilesBuilder(
          int index) {
        return getTilesFieldBuilder().addBuilder(
            index, com.navatar.protobufs.MinimapProto.Minimap.Tile.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       *
       * <pre>
       * The tiles of the minimap.
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder> 
           getTilesBuilderList() {
        return getTilesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.MinimapProto.Minimap.Tile, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder, com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder> 
          getTilesFieldBuilder() {
        if (tilesBuilder_ == null) {
          tilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.navatar.protobufs.MinimapProto.Minimap.Tile, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder, com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder>(
                  tiles_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          tiles_ = null;
        }
        return tilesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Minimap)
    }

    static {
      defaultInstance = new Minimap(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Minimap)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_navatar_protobufs_Minimap_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_navatar_protobufs_Minimap_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_navatar_protobufs_Minimap_Tile_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_navatar_protobufs_Minimap_Tile_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022MinimapProto.proto\022\025com.navatar.protob" +
      "ufs\032\026CoordinatesProto.proto\032\023LandmarkPro" +
      "to.proto\"\342\001\n\007Minimap\022\020\n\010sideSize\030\001 \001(\001\022\014" +
      "\n\004rows\030\002 \001(\005\022\017\n\007columns\030\003 \001(\005\022:\n\016minCoor" +
      "dinates\030\004 \001(\0132\".com.navatar.protobufs.Co" +
      "ordinates\0222\n\005tiles\030\005 \003(\0132#.com.navatar.p" +
      "rotobufs.Minimap.Tile\0326\n\004Tile\022\013\n\003row\030\001 \001" +
      "(\005\022\016\n\006column\030\002 \001(\005\022\021\n\tlandmarks\030\003 \003(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.navatar.protobufs.CoordinatesProto.getDescriptor(),
          com.navatar.protobufs.LandmarkProto.getDescriptor(),
        }, assigner);
    internal_static_com_navatar_protobufs_Minimap_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_navatar_protobufs_Minimap_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_navatar_protobufs_Minimap_descriptor,
        new java.lang.String[] { "SideSize", "Rows", "Columns", "MinCoordinates", "Tiles", });
    internal_static_com_navatar_protobufs_Minimap_Tile_descriptor =
      internal_static_com_navatar_protobufs_Minimap_descriptor.getNestedTypes().get(0);
    internal_static_com_navatar_protobufs_Minimap_Tile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_navatar_protobufs_Minimap_Tile_descriptor,
        new java.lang.String[] { "Row", "Column", "Landmarks", });
    com.navatar.protobufs.CoordinatesProto.getDescriptor();
    com.navatar.protobufs.LandmarkProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
