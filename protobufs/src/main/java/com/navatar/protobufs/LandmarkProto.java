// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LandmarkProto.proto

package com.navatar.protobufs;

public final class LandmarkProto {
  private LandmarkProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LandmarkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Landmark)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
     *
     * <pre>
     * The landmark's x,y coordinates. 
     * </pre>
     */
    boolean hasLocation();
    /**
     * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
     *
     * <pre>
     * The landmark's x,y coordinates. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.Coordinates getLocation();
    /**
     * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
     *
     * <pre>
     * The landmark's x,y coordinates. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getLocationOrBuilder();

    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * The landmark's name. 
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * The landmark's name. 
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * The landmark's name. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
     *
     * <pre>
     * The object the landmark represents (see LandmarkType enum) 
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
     *
     * <pre>
     * The object the landmark represents (see LandmarkType enum) 
     * </pre>
     */
    com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType getType();

    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> 
        getParticlesList();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.Coordinates getParticles(int index);
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    int getParticlesCount();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
        getParticlesOrBuilderList();
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getParticlesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.navatar.protobufs.Landmark}
   *
   * <pre>
   **
   * The protobuf definition for the Landmark class. Landmarks are used by the BuildingMap protobufs 
   * as a variable to represent doors, stairs, etc..
   * </pre>
   */
  public static final class Landmark extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Landmark)
      LandmarkOrBuilder {
    // Use Landmark.newBuilder() to construct.
    private Landmark(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Landmark(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Landmark defaultInstance;
    public static Landmark getDefaultInstance() {
      return defaultInstance;
    }

    public Landmark getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Landmark(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.navatar.protobufs.CoordinatesProto.Coordinates.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = location_.toBuilder();
              }
              location_ = input.readMessage(com.navatar.protobufs.CoordinatesProto.Coordinates.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(location_);
                location_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType value = com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                type_ = value;
              }
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                particles_ = new java.util.ArrayList<com.navatar.protobufs.CoordinatesProto.Coordinates>();
                mutable_bitField0_ |= 0x00000008;
              }
              particles_.add(input.readMessage(com.navatar.protobufs.CoordinatesProto.Coordinates.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          particles_ = java.util.Collections.unmodifiableList(particles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.navatar.protobufs.LandmarkProto.internal_static_com_navatar_protobufs_Landmark_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.navatar.protobufs.LandmarkProto.internal_static_com_navatar_protobufs_Landmark_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.navatar.protobufs.LandmarkProto.Landmark.class, com.navatar.protobufs.LandmarkProto.Landmark.Builder.class);
    }

    public static com.google.protobuf.Parser<Landmark> PARSER =
        new com.google.protobuf.AbstractParser<Landmark>() {
      public Landmark parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Landmark(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Landmark> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code com.navatar.protobufs.Landmark.LandmarkType}
     *
     * <pre>
     * The different types landmarks. 
     * </pre>
     */
    public enum LandmarkType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DOOR = 1;</code>
       */
      DOOR(0, 1),
      /**
       * <code>HALLWAY_INTERSECTION = 2;</code>
       */
      HALLWAY_INTERSECTION(1, 2),
      /**
       * <code>STAIRS = 3;</code>
       */
      STAIRS(2, 3),
      /**
       * <code>ELEVATOR = 4;</code>
       */
      ELEVATOR(3, 4),
      ;

      /**
       * <code>DOOR = 1;</code>
       */
      public static final int DOOR_VALUE = 1;
      /**
       * <code>HALLWAY_INTERSECTION = 2;</code>
       */
      public static final int HALLWAY_INTERSECTION_VALUE = 2;
      /**
       * <code>STAIRS = 3;</code>
       */
      public static final int STAIRS_VALUE = 3;
      /**
       * <code>ELEVATOR = 4;</code>
       */
      public static final int ELEVATOR_VALUE = 4;


      public final int getNumber() { return value; }

      public static LandmarkType valueOf(int value) {
        switch (value) {
          case 1: return DOOR;
          case 2: return HALLWAY_INTERSECTION;
          case 3: return STAIRS;
          case 4: return ELEVATOR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LandmarkType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LandmarkType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LandmarkType>() {
              public LandmarkType findValueByNumber(int number) {
                return LandmarkType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.navatar.protobufs.LandmarkProto.Landmark.getDescriptor().getEnumTypes().get(0);
      }

      private static final LandmarkType[] VALUES = values();

      public static LandmarkType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private LandmarkType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.navatar.protobufs.Landmark.LandmarkType)
    }

    private int bitField0_;
    public static final int LOCATION_FIELD_NUMBER = 1;
    private com.navatar.protobufs.CoordinatesProto.Coordinates location_;
    /**
     * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
     *
     * <pre>
     * The landmark's x,y coordinates. 
     * </pre>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
     *
     * <pre>
     * The landmark's x,y coordinates. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.Coordinates getLocation() {
      return location_;
    }
    /**
     * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
     *
     * <pre>
     * The landmark's x,y coordinates. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getLocationOrBuilder() {
      return location_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * The landmark's name. 
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * The landmark's name. 
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * The landmark's name. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType type_;
    /**
     * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
     *
     * <pre>
     * The object the landmark represents (see LandmarkType enum) 
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
     *
     * <pre>
     * The object the landmark represents (see LandmarkType enum) 
     * </pre>
     */
    public com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType getType() {
      return type_;
    }

    public static final int PARTICLES_FIELD_NUMBER = 4;
    private java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> particles_;
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> getParticlesList() {
      return particles_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    public java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
        getParticlesOrBuilderList() {
      return particles_;
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    public int getParticlesCount() {
      return particles_.size();
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.Coordinates getParticles(int index) {
      return particles_.get(index);
    }
    /**
     * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
     *
     * <pre>
     * Particles used to define an accessible area close to the landmark. 
     * </pre>
     */
    public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getParticlesOrBuilder(
        int index) {
      return particles_.get(index);
    }

    private void initFields() {
      location_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
      name_ = "";
      type_ = com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType.DOOR;
      particles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, location_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, type_.getNumber());
      }
      for (int i = 0; i < particles_.size(); i++) {
        output.writeMessage(4, particles_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, location_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_.getNumber());
      }
      for (int i = 0; i < particles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, particles_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.navatar.protobufs.LandmarkProto.Landmark parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.navatar.protobufs.LandmarkProto.Landmark prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.navatar.protobufs.Landmark}
     *
     * <pre>
     **
     * The protobuf definition for the Landmark class. Landmarks are used by the BuildingMap protobufs 
     * as a variable to represent doors, stairs, etc..
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Landmark)
        com.navatar.protobufs.LandmarkProto.LandmarkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.navatar.protobufs.LandmarkProto.internal_static_com_navatar_protobufs_Landmark_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.navatar.protobufs.LandmarkProto.internal_static_com_navatar_protobufs_Landmark_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.navatar.protobufs.LandmarkProto.Landmark.class, com.navatar.protobufs.LandmarkProto.Landmark.Builder.class);
      }

      // Construct using com.navatar.protobufs.LandmarkProto.Landmark.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
          getParticlesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (locationBuilder_ == null) {
          location_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType.DOOR;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (particlesBuilder_ == null) {
          particles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          particlesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.navatar.protobufs.LandmarkProto.internal_static_com_navatar_protobufs_Landmark_descriptor;
      }

      public com.navatar.protobufs.LandmarkProto.Landmark getDefaultInstanceForType() {
        return com.navatar.protobufs.LandmarkProto.Landmark.getDefaultInstance();
      }

      public com.navatar.protobufs.LandmarkProto.Landmark build() {
        com.navatar.protobufs.LandmarkProto.Landmark result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.navatar.protobufs.LandmarkProto.Landmark buildPartial() {
        com.navatar.protobufs.LandmarkProto.Landmark result = new com.navatar.protobufs.LandmarkProto.Landmark(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.type_ = type_;
        if (particlesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            particles_ = java.util.Collections.unmodifiableList(particles_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.particles_ = particles_;
        } else {
          result.particles_ = particlesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.navatar.protobufs.LandmarkProto.Landmark) {
          return mergeFrom((com.navatar.protobufs.LandmarkProto.Landmark)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.navatar.protobufs.LandmarkProto.Landmark other) {
        if (other == com.navatar.protobufs.LandmarkProto.Landmark.getDefaultInstance()) return this;
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (particlesBuilder_ == null) {
          if (!other.particles_.isEmpty()) {
            if (particles_.isEmpty()) {
              particles_ = other.particles_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureParticlesIsMutable();
              particles_.addAll(other.particles_);
            }
            onChanged();
          }
        } else {
          if (!other.particles_.isEmpty()) {
            if (particlesBuilder_.isEmpty()) {
              particlesBuilder_.dispose();
              particlesBuilder_ = null;
              particles_ = other.particles_;
              bitField0_ = (bitField0_ & ~0x00000008);
              particlesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getParticlesFieldBuilder() : null;
            } else {
              particlesBuilder_.addAllMessages(other.particles_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.navatar.protobufs.LandmarkProto.Landmark parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.navatar.protobufs.LandmarkProto.Landmark) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.navatar.protobufs.CoordinatesProto.Coordinates location_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> locationBuilder_;
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public Builder setLocation(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public Builder setLocation(
          com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public Builder mergeLocation(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              location_ != com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance()) {
            location_ =
              com.navatar.protobufs.CoordinatesProto.Coordinates.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder getLocationBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      /**
       * <code>optional .com.navatar.protobufs.Coordinates location = 1;</code>
       *
       * <pre>
       * The landmark's x,y coordinates. 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The landmark's name. 
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The landmark's name. 
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The landmark's name. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The landmark's name. 
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The landmark's name. 
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       *
       * <pre>
       * The landmark's name. 
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      private com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType type_ = com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType.DOOR;
      /**
       * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
       *
       * <pre>
       * The object the landmark represents (see LandmarkType enum) 
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
       *
       * <pre>
       * The object the landmark represents (see LandmarkType enum) 
       * </pre>
       */
      public com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType getType() {
        return type_;
      }
      /**
       * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
       *
       * <pre>
       * The object the landmark represents (see LandmarkType enum) 
       * </pre>
       */
      public Builder setType(com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.navatar.protobufs.Landmark.LandmarkType type = 3;</code>
       *
       * <pre>
       * The object the landmark represents (see LandmarkType enum) 
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = com.navatar.protobufs.LandmarkProto.Landmark.LandmarkType.DOOR;
        onChanged();
        return this;
      }

      private java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> particles_ =
        java.util.Collections.emptyList();
      private void ensureParticlesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          particles_ = new java.util.ArrayList<com.navatar.protobufs.CoordinatesProto.Coordinates>(particles_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> particlesBuilder_;

      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates> getParticlesList() {
        if (particlesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(particles_);
        } else {
          return particlesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public int getParticlesCount() {
        if (particlesBuilder_ == null) {
          return particles_.size();
        } else {
          return particlesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates getParticles(int index) {
        if (particlesBuilder_ == null) {
          return particles_.get(index);
        } else {
          return particlesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder setParticles(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (particlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParticlesIsMutable();
          particles_.set(index, value);
          onChanged();
        } else {
          particlesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder setParticles(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (particlesBuilder_ == null) {
          ensureParticlesIsMutable();
          particles_.set(index, builderForValue.build());
          onChanged();
        } else {
          particlesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder addParticles(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (particlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParticlesIsMutable();
          particles_.add(value);
          onChanged();
        } else {
          particlesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder addParticles(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        if (particlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParticlesIsMutable();
          particles_.add(index, value);
          onChanged();
        } else {
          particlesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder addParticles(
          com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (particlesBuilder_ == null) {
          ensureParticlesIsMutable();
          particles_.add(builderForValue.build());
          onChanged();
        } else {
          particlesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder addParticles(
          int index, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        if (particlesBuilder_ == null) {
          ensureParticlesIsMutable();
          particles_.add(index, builderForValue.build());
          onChanged();
        } else {
          particlesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder addAllParticles(
          java.lang.Iterable<? extends com.navatar.protobufs.CoordinatesProto.Coordinates> values) {
        if (particlesBuilder_ == null) {
          ensureParticlesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, particles_);
          onChanged();
        } else {
          particlesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder clearParticles() {
        if (particlesBuilder_ == null) {
          particles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          particlesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public Builder removeParticles(int index) {
        if (particlesBuilder_ == null) {
          ensureParticlesIsMutable();
          particles_.remove(index);
          onChanged();
        } else {
          particlesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder getParticlesBuilder(
          int index) {
        return getParticlesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder getParticlesOrBuilder(
          int index) {
        if (particlesBuilder_ == null) {
          return particles_.get(index);  } else {
          return particlesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public java.util.List<? extends com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
           getParticlesOrBuilderList() {
        if (particlesBuilder_ != null) {
          return particlesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(particles_);
        }
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder addParticlesBuilder() {
        return getParticlesFieldBuilder().addBuilder(
            com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates.Builder addParticlesBuilder(
          int index) {
        return getParticlesFieldBuilder().addBuilder(
            index, com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance());
      }
      /**
       * <code>repeated .com.navatar.protobufs.Coordinates particles = 4;</code>
       *
       * <pre>
       * Particles used to define an accessible area close to the landmark. 
       * </pre>
       */
      public java.util.List<com.navatar.protobufs.CoordinatesProto.Coordinates.Builder> 
           getParticlesBuilderList() {
        return getParticlesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder> 
          getParticlesFieldBuilder() {
        if (particlesBuilder_ == null) {
          particlesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.navatar.protobufs.CoordinatesProto.Coordinates, com.navatar.protobufs.CoordinatesProto.Coordinates.Builder, com.navatar.protobufs.CoordinatesProto.CoordinatesOrBuilder>(
                  particles_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          particles_ = null;
        }
        return particlesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Landmark)
    }

    static {
      defaultInstance = new Landmark(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Landmark)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_navatar_protobufs_Landmark_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_navatar_protobufs_Landmark_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023LandmarkProto.proto\022\025com.navatar.proto" +
      "bufs\032\026CoordinatesProto.proto\"\217\002\n\010Landmar" +
      "k\0224\n\010location\030\001 \001(\0132\".com.navatar.protob" +
      "ufs.Coordinates\022\014\n\004name\030\002 \001(\t\022:\n\004type\030\003 " +
      "\001(\0162,.com.navatar.protobufs.Landmark.Lan" +
      "dmarkType\0225\n\tparticles\030\004 \003(\0132\".com.navat" +
      "ar.protobufs.Coordinates\"L\n\014LandmarkType" +
      "\022\010\n\004DOOR\020\001\022\030\n\024HALLWAY_INTERSECTION\020\002\022\n\n\006" +
      "STAIRS\020\003\022\014\n\010ELEVATOR\020\004"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.navatar.protobufs.CoordinatesProto.getDescriptor(),
        }, assigner);
    internal_static_com_navatar_protobufs_Landmark_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_navatar_protobufs_Landmark_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_navatar_protobufs_Landmark_descriptor,
        new java.lang.String[] { "Location", "Name", "Type", "Particles", });
    com.navatar.protobufs.CoordinatesProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
